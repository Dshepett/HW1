Variant number = 270
Number of task = 4
Number of function = 20

Задание:
    Обобщенный артефакт, используемый в задании:
        Объемная геометрическая фигура.
    Базовые альтернативы (уникальные параметры, задающие отличительные признаки альтернатив):
        1.Шар (целочисленый радиус)
        2.Параллелепипед (три целочисленных ребра).
        3.Правильный тетраэдр (длина ребра - целое). 
    Общие для всех альтернатив переменные:
        Плотность материала фигуры.
    Общие для всех альтернатив функции:
        Вычисление площади поверхности.

Функция:
    Удалить из контейнера те элементы, для которых значение,
    полученное с использованием функции, общей для всех альтернатив, больше
    чем среднее арифметическое для всех элементов контейнера, полученное с
    использованием этой же функции. Остальные элементы передвинуть в
    началу контейнера с сохранением порядка.


Запуск программы:
    python main.py -f <inputFileName> <outputFileName1> <outputFileName1>           Чтобы использовать данные из файла <inputFileName>
            
    python main.py -n <positiveNumber> <outputFileName1> <outputFileName1>          Чтобы использовать сгенерированные данные
    
    python main.py --test <positiveNumber> <outputFileName>                         Чтобы сгенерировать тестовый файл с <positiveNumber>
                                                                                    элементов в <outputFileName>

Основные характеристики:
    Модулей реализации - 6
    Общий размер исходных файлов - 28.5 кб (6 файлов)
    Размер тестов - 184 кб (6 штук)
    Общий размер папки - 2.45 мб


Тесты:
    Тесты находятся в папке tests и имеют вид testN.txt, где N - номер теста.
    Вывод элементов каждого теста находится в папке out:
            - файл с элементами теста имеет вид out_N_elements.txt, где N - номер теста.
            - файл с результатом теста и временем выполнения программы имеет вид out_N_result.txt, где N - номер теста.
    Результаты тестов:
    Время выполнения показывает резултаты в текущей парадигме и через \ показывает результаты в объектно-ориентированном стиле программы
        1-й тест:
                - 5 элементов
                - время выполнения: 0.0029613 s \ 0.000325 s
        2-й тест:
                - 100 элементов
                - время выполнения: 0.020966 s \ 0.000516 s
        3-й тест:
                - 1000 элементов
                - время выполнения: 0.012965 s \ 0.002021 s
        4-й тест:
                - 10000 элементов
                - время выполнения: 0.266969 s \ 0.000325 s
        5-й тест:
                - 5000 элементов
                - время выполнения: 0.08299 s \ 0.012168 s

Как можно заметить, программа с динамической типизацией стала работать значительно медленнее, по сравнению с предыдущей программой,
но при этом стала меньше в объеме и отстутствует исполняемый файл. Подытожив, можно сказать, что программа на python жертвует
производительностью ради простоты написания кода.